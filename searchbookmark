#!/bin/bash

sshversion="$(ssh -V 2>&1 | sed 's/^OpenSSH_\([0-9.]*\).*/\1/')"

# Mit readlink kann man den tatsächlichen Speicherort des Skriptes ermitteln.
pathofsearchbm="$(dirname $(readlink -f ${0}))"
if [ -e "${pathofsearchbm}/config/cloudybm.cfg" ]; then
 source "${pathofsearchbm}/config/cloudybm.cfg"
 clientdir="${clientdir%/}"
else
 notify-send Fehler "Datei ${pathofsearchbm}/config/cloudybm.cfg existiert nicht.\nSkript wird abgebrochen"
 logger -s --id=$$ "Datei ${pathofsearchbm}/config/cloudybm.cfg existiert nicht. Skript wird abgebrochen"
 exit 1
fi

if [ -z "$(type -p zenity)" ]; then
 notify-send -i "$closepng" Fehler "Zenity wurde nicht gefunden. Bitte erst installieren."
 logger -s --id=$$ "Zenity wurde nicht gefunden. Bitte erst installieren."
 exit 1
fi
if [ -z "$(type -p yad)" ]; then
 notify-send -i "$closepng" Fehler "Yad wurde nicht gefunden. Bitte erst installieren."
 logger -s --id=$$ "Yad wurde nicht gefunden. Bitte erst installieren."
 exit 1
fi
if [ ! -d "${clientdir}" ]; then
 mkdir -v "${clientdir}"
 echo -e "Wichtiger Hinweis:\nDies ist eine Kopie der bookmarks.txt vom Server. Die Datei wird nur zum Auslesen genutzt und nur in der Richtung Server => Lokal synchronisiert. Bei Änderungen bitte die Datei auf dem Server modifizieren.\nManuelle Änderungen an der Datei in diesem Ordner werden nicht berücksichtigt\nund ggf. beim Hinzufügen eines neuen Lesezeichens überschrieben." >"${clientdir}/README"
fi

echo "Verfügbarkeit des Rechners wird überprüft ..."
ping -c 1 "${servername}" &>/dev/null
serverreturn="$?"

if [ "$serverreturn" == 0 ]; then

 echo "${0}: ${servername} ist erreichbar." | tee >(logger --id=$$)
 serveronline="yes"
 serverdir="${serverdir%/}"
 [ -z "$(ssh-add -l | grep "$(ssh-keygen -lf "$serverkey" | cut -f2 -d' ')")" -a -n "$serverkey" ] && ssh-add "$serverkey"

 checkdl() {
  if [ "$(ssh -p "$serverport" "${serveruser}@${servername}" 'sha1sum "'"$serverdir"'/bookmarks.txt" | cut -f1 -d" "')" != "$(sha1sum "${clientdir}/bookmarks.txt" | cut -f1 -d" ")" ]; then

   # Schreibrechte werden erteilt.
   [ ! -w "${clientdir}/bookmarks.txt" -a -e "${clientdir}/bookmarks.txt" ] && chmod -v +w "${clientdir}/bookmarks.txt"
   if [ "$(echo "${sshversion} < 9.6" | bc -l)" == 1 ]; then
    scp -pP "$serverport" "${serveruser}@${servername}":"\"${serverdir}\"/bookmarks.txt" "${clientdir}/"
    scpexitb=$?
   else
    scp -pP "$serverport" "${serveruser}@${servername}":"${serverdir}/bookmarks.txt" "${clientdir}/"
    scpexitb=$?
   fi
   if [ ! "$scpexitb" == 0 ]; then
    logger -s --id=$$ "bookmarks.txt konnte nicht runtergeladen werden."
    notify-send -i "$closepng" Fehler "bookmarks.txt konnte nicht runtergeladen werden."
   else
    echo "${0}: bookmarks.txt runtergeladen." | tee >(logger --id=$$)
    notify-send -i "$applypng" Hinweis "bookmarks.txt runtergeladen."
   fi
   # Schreibrechte werden wieder entzogen.
   [ -w "${clientdir}/bookmarks.txt" -a -e "${clientdir}/bookmarks.txt" ] && chmod -v -w "${clientdir}/bookmarks.txt"

  else

   echo "${0}: Bookmark-Dateien vom Server und Client sind identisch." | tee >(logger --id=$$)

  fi
 }

 checkdl &

else

 echo "${0}: ${servername} ist nicht erreichbar. Es wird die lokale Bookmark-Datei ausgewertet." | tee >(logger --id=$$)

fi

# Den Internal Field Separator neu zu definieren ist deshalb notwendig, weil die Spalten in der bookmark.txt
# mit Tabulatoren voneinander getrennt sind. Wichtig für yad!
IFS=$'\t'

if [ "$serveronline" == "yes" ]; then

 eing="$(zenity --entry \
                --window-icon="${pathofsearchbm}/hicolor/16x16/apps/mybookmarks.0.svg" \
                --title="Cloud Bookmark-Suche" \
                --text="Bitte Suchwort eingeben:" \
 )"

 [ $? == 1 ] && exit 1 

 if [ "$eing" == '*' ]; then
  pisuche="$(ssh -p "$serverport" "${serveruser}@${servername}" '/usr/bin/cat '\"$serverdir\"'/bookmarks.txt')"
 else
  pisuche="$(ssh -p "$serverport" "${serveruser}@${servername}" '/usr/bin/grep -i '\"$eing\"' '\"$serverdir\"'/bookmarks.txt')"
 fi

else

 eing="$(zenity --entry \
                --window-icon="${pathofsearchbm}/hicolor/16x16/apps/mybookmarks.0.svg" \
                --title="Lokale Bookmark-Suche" \
                --text="Bitte Suchwort eingeben:" \
 )"

 [ $? == 1 ] && exit 1 

 if [ "$eing" == '*' ]; then
  pisuche="$(cat "${clientdir}/bookmarks.txt")"
 else
  pisuche="$(grep -i "$eing" "${clientdir}/bookmarks.txt")"
 fi

fi

if [ -n "$pisuche" ]; then

  pisuche="$(echo "$pisuche"  | sed 's/^\(.*\)[\t]\(.*\)[\t]\(.*\)/"\1"\t"\2"\t\3/' | sed '
                                                                                           s/""/-/g
                                                                                           s/\(^\|\t\)"/\1/g
                                                                                           s/"\(\t\)/\1/g
                                                                                           # yad-Encoding
                                                                                           s/&/\&amp;/g
                                                                                           s/"/\&quot;/g
                                                                                           s/'\''/\&apos;/g
                                                                                           s/</\&lt;/g
                                                                                           s/>/\&gt;/g
                                                                                          ' | tr '\n' '\t')"

  # Löschen-Button wird nur angezeigt, wenn Server erreichbar ist.
  if [ "$serveronline" == "yes" ]; then
    #--print-all (Kompletter Inhalt)
    #--print-column=3 (Nur 3. Spalte aus ausgewählter Zeile)
    #--print-column=0 (komplette ausgewählte Zeile)
    result=$(yad --height=420 \
           --width=600 \
           --list \
           --window-icon="${pathofsearchbm}/hicolor/16x16/apps/mybookmarks.0.svg" \
           --title="Bitte Lesezeichen auswählen" \
           --column="Schlüsselwörter" \
           --column="Beschreibung" \
           --column="URI" \
           --print-column=0 \
           --separator='\t' \
           --button="Löschen:2" \
           --button="Abbrechen:1" \
           --button="Öffnen:0" \
           $pisuche)
  else
    result=$(yad --height=420 \
           --width=600 \
           --list \
           --window-icon="${pathofsearchbm}/hicolor/16x16/apps/mybookmarks.0.svg" \
           --title="Bitte Lesezeichen auswählen" \
           --column="Schlüsselwörter" \
           --column="Beschreibung" \
           --column="URI" \
           --print-column=0 \
           --separator='\t' \
           --button="Abbrechen:1" \
           --button="Öffnen:0" \
           $pisuche)
  fi
    
  bmauswexit=$?
  result="$(sed 's/-\t/\t/g' <<<"$result")"
  bmwoerter="$(echo "$result" | cut -f1)"
  bmdesc="$(echo "$result" | cut -f2)"
  bmuri="$(echo "$result" | cut -f3)"

  if [ "$bmauswexit" == 0 ]; then

   # Bestimmte Zeichen werden hier für den Browser wieder dekodiert.
   bmuri="$(echo "$bmuri" | sed '
                                 s/%26/\&/g
                                 s/%3F/?/g
                                ')"
   # Öffnen der Seite in Standardanwendung.
   nohup xdg-open "$bmuri" &
 
  # Löschung eines Bookmarks funktioniert nur, wenn Server erreichbar ist.
  elif [ "$bmauswexit" == 2 ]; then

   serverwork="$(ssh -p "$serverport" "${serveruser}@${servername}" '
                    delnr="$(grep -nP '\'''"$bmuri"'($|\t)'\'' "'"${serverdir}"'/bookmarks.txt" 2>/dev/null | grep -o '^[0-9]*' 2>/dev/null)"
                    cp -f "'"${serverdir}"'/bookmarks.txt" "'"${serverdir}"'/bookmarks.bak" 2>/dev/null && \
                    "'"${cloudybmdir%/}"'"/cloudybm -d "$delnr" &>/dev/null
                    echo "${?}:${delnr}"
                                                                    ')"
   delbmexit="${serverwork%:*}"
   delnr="${serverwork#*:}"

   # Neue Datei wird vom Server heruntergeladen.
   case $delbmexit in
    0) # Wartet ggf. auf HG-Prozess (siehe checkdl &)
       wait
       # Schreibrechte werden erteilt.
       [ ! -w "${clientdir}/bookmarks.txt" ] && chmod -v +w "${clientdir}/bookmarks.txt"
       if [ "$(echo "${sshversion} < 9.6" | bc -l)" == 1 ]; then
        scp -pP "$serverport" "${serveruser}@${servername}":"\"${serverdir}\"/bookmarks.txt" "${clientdir}/"
        scpexit=$?
       else
        scp -pP "$serverport" "${serveruser}@${servername}":"${serverdir}/bookmarks.txt" "${clientdir}/"
        scpexit=$?
       fi
       if [ "$scpexit" == 0 ]; then
        echo "${0}: Lesezeichen (Zeile ${delnr}) gelöscht und bookmarks.txt kopiert." | tee >(logger --id=$$)
        notify-send -i "$applypng" Hinweis "Lesezeichen (Zeile ${delnr}) gelöscht und bookmarks.txt kopiert."
       else
        logger -s --id=$$ "Lesezeichen (Zeile ${delnr}) gelöscht aber Download hat nicht geklappt."
        notify-send -i "$closepng" Fehler "Lesezeichen (Zeile ${delnr}) gelöscht aber Download hat nicht geklappt."
       fi
       # Schreibrechte werden wieder entzogen.
       [ -w "${clientdir}/bookmarks.txt" ] && chmod -v -w "${clientdir}/bookmarks.txt"
    ;;
    *) logger -s --id=$$ "Lesezeichen konnte nicht gelöscht werden. Zur Debuggen auf Server bitte journalctl -r aufrufen."
       notify-send -i "$closepng" Fehler "Lesezeichen konnte nicht gelöscht werden."
    ;;
   esac

  fi

else

  logger -s --id=$$ "Nichts passendes gefunden."
  notify-send -i "$closepng" Hinweis "Nichts passendes gefunden."

fi
