#!/bin/bash

# Mit readlink kann man den tatsächlichen Speicherort des Skriptes ermitteln.
pathofsearchbm="$(dirname $(readlink -f ${0}))"
if [ -e "${pathofsearchbm}/config/cloudybm.cfg" ]; then
 source "${pathofsearchbm}/config/cloudybm.cfg"
 clientdir="${clientdir%/}"
else
 notify-send Fehler "Datei ${pathofsearchbm}/config/cloudybm.cfg existiert nicht.\nSkript wird abgebrochen"
 logger -s --id=$$ "Datei ${pathofsearchbm}/config/cloudybm.cfg existiert nicht. Skript wird abgebrochen"
 exit 1
fi
if [ -z "$(type -p zenity)" ]; then
 notify-send -i "$closepng" Fehler "Zenity wurde nicht gefunden. Bitte erst installieren."
 logger -s --id=$$ "Zenity wurde nicht gefunden. Bitte erst installieren."
 exit 1
fi
if [ ! -d "${clientdir}" ]; then
 mkdir -v "${clientdir}"
 echo -e "Wichtiger Hinweis:\nDies ist eine Kopie der bookmarks.txt vom Server. Die Datei wird nur zum Auslesen genutzt und nur in der Richtung Server => Lokal synchronisiert. Bei Änderungen bitte die Datei auf dem Server modifizieren.\nManuelle Änderungen an der Datei in diesem Ordner werden nicht berücksichtigt\nund ggf. beim Hinzufügen eines neuen Lesezeichens überschrieben." >"${clientdir}/README"
fi

echo "Verfügbarkeit des Rechners wird überprüft ..."
ping -c 1 "${servername}" &>/dev/null
serverreturn="$?"

if [ "$serverreturn" == 0 ]; then
 echo "${0}: ${servername} ist erreichbar." | tee >(logger --id=$$)
 serveronline="yes"
 serverdir="${serverdir%/}"
 [ -z "$(ssh-add -l | grep "$(ssh-keygen -lf "$serverkey" | cut -f2 -d' ')")" -a -n "$serverkey" ] && ssh-add "$serverkey"
 # Server-Verzeichnis wird geprüft.
 ssh -p "$serverport" "${serveruser}@${servername}" '[ ! -d "'"$serverdir"'" ] && mkdir -pv "'"$serverdir"'"'
else
 notify-send -i "$closepng" Fehler "${servername} ist nicht erreichbar."
 logger -s --id=$$ "${servername} ist nicht erreichbar."
 # Diese Option ist zur Sicherheit, wenn ein Rechner zuvor mal nicht richtig ausgehängt wurde.
 exit 1
fi

newbm="$(zenity --forms \
				--title="Neues Lesezeichen hinzufügen" \
				--text="Bitte Informationen eingeben" \
				--separator=$'\t' \
				--add-entry="Schlüsselwörter (bitte mit Komma trennen)" \
				--add-entry="Beschreibung" \
				--add-entry="URI"
		)"

# Wenn Zenity-Abbruch durchgeführt wurde
[ -z "$newbm" ] && exit

bmkeywords="$(echo "$newbm" | cut -f1)"
bmdesc="$(echo "$newbm" | cut -f2)"
# URL-Encoding ist wichtig, damit pisuche in searchbookmark richtig ausgewertet.
# Identisch mit Funktion urienc in cloudybm.
bmuri="$(echo "$newbm" | cut -f3 | sed '
                                              s/ /%20/g
                                              s/"/%22/g
                                              s/&/%26/g
                                              s/'\''/%27/g
                                              s/(/%28/g
                                              s/)/%29/g
                                              s/;/%3B/g
                                              s/</%3C/g
                                              s/>/%3E/g
                                              s/\[/%5B/g
                                              s/]/%5D/g
                                              s/{/%7B/g
                                              s/}/%7D/g
                                              s/|/%7C/g
                                              # Wenn kein Querystring, dann alle Pluszeichen mit %2B kodieren.
                                              /\?/!s/\+/%2B/g
                                              # Hier wird das Pluszeichen kodiert: Vor einem Query-String als %2B
                                              #                                    Als Teil eines Query-Strings als Leerzeichen (%20)
                                              /\?/{h; s/\?.*//; s/\+/%2B/g; x; s/^[^?]*?//; s/\+/%20/g; H; g; s/\n/?/}
                                              # Das ? muss als letztes verarbeitet werden, da es oben zur Auswertung
                                              # genutzt wird.
                                              s/\?/%3F/g
                                             ')"

# Variable remotepath wird von Skript cloudybm auf Server benötigt.
newbmexit="$(ssh -p "$serverport" "${serveruser}@${servername}" "export remotepath=\"${serverdir}\"
                                                                 \"${cloudybmdir%/}\"/cloudybm -B \"$bmkeywords\" \"$bmdesc\" \"$bmuri\"" &>/dev/null; echo $?)"

# Exitcodes von cloudybm werden ausgewertet.
case $newbmexit in
    0) # Schreibrechte werden erteilt.
       [ ! -w "${clientdir}/bookmarks.txt" ] && chmod -v +w "${clientdir}/bookmarks.txt"
       scp -pP "$serverport" "${serveruser}@${servername}":"\"${serverdir}\"/bookmarks.txt" "${clientdir}/"
       scpexit=$?
       if [ "$scpexit" == 0 ]; then
        echo "${0}: Neues Lesezeichen hinzugefügt und bookmarks.txt kopiert." | tee >(logger --id=$$)
        notify-send -i "$applypng" Hinweis "Neues Lesezeichen hinzugefügt und bookmarks.txt kopiert."
       else
        logger -s --id=$$ "Neues Lesezeichen hinzugefügt aber Download hat nicht geklappt."
        notify-send -i "$closepng" Fehler "Neues Lesezeichen hinzugefügt aber Download hat nicht geklappt."
       fi
       # Schreibrechte werden wieder entzogen.
       [ -w "${clientdir}/bookmarks.txt" ] && chmod -v -w "${clientdir}/bookmarks.txt"
    ;;
    2) logger -s --id=$$ "Lesezeichen ist bereits in bookmarks.txt vorhanden (Exitcode: ${newbmexit})."
       notify-send -i "$closepng" Hinweis "Lesezeichen ist bereits in bookmarks.txt vorhanden (Exitcode: ${newbmexit})."
    ;;
    *) logger -s --id=$$ "Lesezeichen konnte nicht hinzugefügt werden (Exitcode: ${newbmexit})."
       notify-send -i "$closepng" Fehler "Lesezeichen konnte nicht hinzugefügt werden (Exitcode: ${newbmexit})."
    ;;
esac
